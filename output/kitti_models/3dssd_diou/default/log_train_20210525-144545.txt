2021-05-25 14:45:45,364   INFO  **********************Start logging**********************
2021-05-25 14:45:45,364   INFO  CUDA_VISIBLE_DEVICES=ALL
2021-05-25 14:45:45,364   INFO  cfg_file         cfgs/kitti_models/3dssd_diou.yaml
2021-05-25 14:45:45,365   INFO  batch_size       12
2021-05-25 14:45:45,365   INFO  epochs           120
2021-05-25 14:45:45,365   INFO  workers          8
2021-05-25 14:45:45,365   INFO  extra_tag        default
2021-05-25 14:45:45,365   INFO  ckpt             None
2021-05-25 14:45:45,365   INFO  pretrained_model None
2021-05-25 14:45:45,365   INFO  launcher         none
2021-05-25 14:45:45,365   INFO  tcp_port         18888
2021-05-25 14:45:45,365   INFO  sync_bn          False
2021-05-25 14:45:45,365   INFO  fix_random_seed  False
2021-05-25 14:45:45,365   INFO  ckpt_save_interval 1
2021-05-25 14:45:45,365   INFO  local_rank       0
2021-05-25 14:45:45,365   INFO  max_ckpt_save_num 30
2021-05-25 14:45:45,365   INFO  merge_all_iters_to_one_epoch False
2021-05-25 14:45:45,365   INFO  set_cfgs         None
2021-05-25 14:45:45,365   INFO  max_waiting_mins 0
2021-05-25 14:45:45,365   INFO  start_epoch      0
2021-05-25 14:45:45,365   INFO  save_to_file     False
2021-05-25 14:45:45,365   INFO  cfg.ROOT_DIR: /home/yzy/PycharmProjects/3DSSD-torch
2021-05-25 14:45:45,365   INFO  cfg.LOCAL_RANK: 0
2021-05-25 14:45:45,365   INFO  cfg.CLASS_NAMES: ['Car', 'Pedestrian', 'Cyclist']
2021-05-25 14:45:45,365   INFO  
cfg.DATA_CONFIG = edict()
2021-05-25 14:45:45,365   INFO  cfg.DATA_CONFIG.DATASET: KittiDataset
2021-05-25 14:45:45,365   INFO  cfg.DATA_CONFIG.DATA_PATH: /home/yzy/PycharmProjects/OpenPCDet/data/kitti
2021-05-25 14:45:45,365   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [0, -40, -3, 70.4, 40, 1]
2021-05-25 14:45:45,365   INFO  
cfg.DATA_CONFIG.DATA_SPLIT = edict()
2021-05-25 14:45:45,365   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2021-05-25 14:45:45,365   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: val
2021-05-25 14:45:45,365   INFO  
cfg.DATA_CONFIG.INFO_PATH = edict()
2021-05-25 14:45:45,365   INFO  cfg.DATA_CONFIG.INFO_PATH.train: ['kitti_infos_train.pkl']
2021-05-25 14:45:45,365   INFO  cfg.DATA_CONFIG.INFO_PATH.test: ['kitti_infos_val.pkl']
2021-05-25 14:45:45,365   INFO  cfg.DATA_CONFIG.FOV_POINTS_ONLY: True
2021-05-25 14:45:45,365   INFO  
cfg.DATA_CONFIG.DATA_AUGMENTOR = edict()
2021-05-25 14:45:45,365   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.DISABLE_AUG_LIST: ['placeholder']
2021-05-25 14:45:45,365   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.AUG_CONFIG_LIST: [{'NAME': 'gt_sampling', 'USE_ROAD_PLANE': True, 'DB_INFO_PATH': ['kitti_dbinfos_train.pkl'], 'PREPARE': {'filter_by_min_points': ['Car:5', 'Pedestrian:5', 'Cyclist:5'], 'filter_by_difficulty': [-1]}, 'SAMPLE_GROUPS': ['Car:20', 'Pedestrian:15', 'Cyclist:15'], 'NUM_POINT_FEATURES': 4, 'DATABASE_WITH_FAKELIDAR': False, 'REMOVE_EXTRA_WIDTH': [0.0, 0.0, 0.0], 'LIMIT_WHOLE_SCENE': True}, {'NAME': 'random_world_flip', 'ALONG_AXIS_LIST': ['x']}, {'NAME': 'random_world_rotation', 'WORLD_ROT_ANGLE': [-0.78539816, 0.78539816]}, {'NAME': 'random_world_scaling', 'WORLD_SCALE_RANGE': [0.95, 1.05]}]
2021-05-25 14:45:45,365   INFO  
cfg.DATA_CONFIG.POINT_FEATURE_ENCODING = edict()
2021-05-25 14:45:45,365   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding
2021-05-25 14:45:45,365   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'intensity']
2021-05-25 14:45:45,365   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'intensity']
2021-05-25 14:45:45,365   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'sample_points', 'NUM_POINTS': {'train': 16384, 'test': 16384}}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': False}}]
2021-05-25 14:45:45,366   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: /home/yzy/PycharmProjects/OpenPCDet/tools/cfgs/dataset_configs/kitti_dataset.yaml
2021-05-25 14:45:45,366   INFO  
cfg.MODEL = edict()
2021-05-25 14:45:45,366   INFO  cfg.MODEL.NAME: SSD3D
2021-05-25 14:45:45,366   INFO  
cfg.MODEL.BACKBONE_3D = edict()
2021-05-25 14:45:45,366   INFO  cfg.MODEL.BACKBONE_3D.NAME: PointNet2MSG_FPS
2021-05-25 14:45:45,366   INFO  
cfg.MODEL.BACKBONE_3D.SA_CONFIG = edict()
2021-05-25 14:45:45,366   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.NPOINTS: [[4096], [512], [256, 256]]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.RADIUS: [[0.2, 0.4, 0.8], [0.4, 0.8, 1.6], [1.6, 3.2, 4.8]]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.NSAMPLE: [[32, 32, 64], [32, 32, 64], [32, 32, 32]]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.MLPS: [[[16, 16, 32], [16, 16, 32], [32, 32, 64]], [[64, 64, 128], [64, 64, 128], [64, 96, 128]], [[128, 128, 256], [128, 192, 256], [128, 256, 256]]]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.DILATED_GROUP: [True, True, True]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.FPS_MOD: [['D-FPS'], ['FS'], ['F-FPS', 'D-FPS']]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.BACKBONE_3D.SA_CONFIG.FPS_SAMPLE_RANGE: [[-1], [-1], [512, -1]]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.BACKBONE_3D.AGGREGATION_CHANNELS: [64, 128, 256]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.BACKBONE_3D.FP_MLPS: []
2021-05-25 14:45:45,366   INFO  
cfg.MODEL.PFE = edict()
2021-05-25 14:45:45,366   INFO  cfg.MODEL.PFE.NAME: VoteModule
2021-05-25 14:45:45,366   INFO  cfg.MODEL.PFE.NUM_POINTS: [256]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.PFE.NUM_INPUT_FEATURES: 256
2021-05-25 14:45:45,366   INFO  cfg.MODEL.PFE.MLPS: [128]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.PFE.VOTE_RANGE: [3.0, 3.0, 2.0]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.PFE.WITH_RES_FEATURE: False
2021-05-25 14:45:45,366   INFO  cfg.MODEL.PFE.AGGREGATION_MLPS: [[256, 256, 256, 512], [256, 256, 512, 1024]]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.PFE.AGGREGATION_OUT: 512
2021-05-25 14:45:45,366   INFO  cfg.MODEL.PFE.AGGREGATION_RADIUS: [4.8, 6.4]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.PFE.AGGREGATION_NSAMPLES: [16, 32]
2021-05-25 14:45:45,366   INFO  
cfg.MODEL.POINT_HEAD = edict()
2021-05-25 14:45:45,366   INFO  cfg.MODEL.POINT_HEAD.NAME: PointHeadBox3DSSD
2021-05-25 14:45:45,366   INFO  cfg.MODEL.POINT_HEAD.CLS_FC: [256, 256]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.POINT_HEAD.REG_FC: [256, 256]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.POINT_HEAD.CLASS_AGNOSTIC: False
2021-05-25 14:45:45,366   INFO  cfg.MODEL.POINT_HEAD.USE_POINT_FEATURES_BEFORE_FUSION: False
2021-05-25 14:45:45,366   INFO  
cfg.MODEL.POINT_HEAD.TARGET_CONFIG = edict()
2021-05-25 14:45:45,366   INFO  cfg.MODEL.POINT_HEAD.TARGET_CONFIG.GT_EXTRA_WIDTH: [0.2, 0.2, 0.2]
2021-05-25 14:45:45,366   INFO  cfg.MODEL.POINT_HEAD.TARGET_CONFIG.BOX_CODER: PointResidual_BinOri_Coder
2021-05-25 14:45:45,366   INFO  
cfg.MODEL.POINT_HEAD.TARGET_CONFIG.BOX_CODER_CONFIG = edict()
2021-05-25 14:45:45,366   INFO  cfg.MODEL.POINT_HEAD.TARGET_CONFIG.BOX_CODER_CONFIG.use_mean_size: True
2021-05-25 14:45:45,366   INFO  cfg.MODEL.POINT_HEAD.TARGET_CONFIG.BOX_CODER_CONFIG.mean_size: [[3.9, 1.6, 1.56], [0.8, 0.6, 1.73], [1.76, 0.6, 1.73]]
2021-05-25 14:45:45,366   INFO  
cfg.MODEL.POINT_HEAD.LOSS_CONFIG = edict()
2021-05-25 14:45:45,366   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_REG: WeightedSmoothL1Loss
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.CORNER_LOSS_REGULARIZATION: True
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.CENTERNESS_REGULARIZATION: False
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.IOU_REGULARIZATION: True
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.POINT_BOX_REG: diou
2021-05-25 14:45:45,367   INFO  
cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.point_cls_weight: 1.0
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.point_box_weight: 1.0
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.corner_weight: 1.0
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POINT_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2021-05-25 14:45:45,367   INFO  
cfg.MODEL.POST_PROCESSING = edict()
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POST_PROCESSING.SCORE_THRESH: 0.1
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POST_PROCESSING.OUTPUT_RAW_SCORE: False
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: kitti
2021-05-25 14:45:45,367   INFO  
cfg.MODEL.POST_PROCESSING.NMS_CONFIG = edict()
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.MULTI_CLASSES_NMS: False
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.1
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 4096
2021-05-25 14:45:45,367   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 500
2021-05-25 14:45:45,367   INFO  
cfg.OPTIMIZATION = edict()
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 12
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 120
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.LR: 0.01
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.01
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.85]
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [80, 120]
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2021-05-25 14:45:45,367   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 10
2021-05-25 14:45:45,367   INFO  cfg.TAG: 3dssd_diou
2021-05-25 14:45:45,367   INFO  cfg.EXP_GROUP_PATH: kitti_models
2021-05-25 14:45:45,460   INFO  Database filter by min points Car: 14357 => 13532
2021-05-25 14:45:45,460   INFO  Database filter by min points Pedestrian: 2207 => 2168
2021-05-25 14:45:45,461   INFO  Database filter by min points Cyclist: 734 => 705
2021-05-25 14:45:45,475   INFO  Database filter by difficulty Car: 13532 => 10759
2021-05-25 14:45:45,477   INFO  Database filter by difficulty Pedestrian: 2168 => 2075
2021-05-25 14:45:45,478   INFO  Database filter by difficulty Cyclist: 705 => 581
2021-05-25 14:45:45,482   INFO  Loading KITTI dataset
2021-05-25 14:45:45,559   INFO  Total samples for KITTI dataset: 3712
2021-05-25 14:45:46,783   INFO  SSD3D(
  (vfe): None
  (backbone_3d): PointNet2MSG_FPS(
    (SA_modules): ModuleList(
      (0): PointnetSAModuleMSG_FPS(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
          (2): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (8): ReLU()
          )
          (2): Sequential(
            (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (8): ReLU()
          )
        )
        (points_sampler): Points_Sampler(
          (samplers): ModuleList(
            (0): DFPS_Sampler()
          )
        )
      )
      (1): PointnetSAModuleMSG_FPS(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
          (2): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(67, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(67, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (8): ReLU()
          )
          (2): Sequential(
            (0): Conv2d(67, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (8): ReLU()
          )
        )
        (points_sampler): Points_Sampler(
          (samplers): ModuleList(
            (0): FS_Sampler()
          )
        )
      )
      (2): PointnetSAModuleMSG_FPS(
        (groupers): ModuleList(
          (0): QueryAndGroup()
          (1): QueryAndGroup()
          (2): QueryAndGroup()
        )
        (mlps): ModuleList(
          (0): Sequential(
            (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (8): ReLU()
          )
          (1): Sequential(
            (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(128, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(192, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (8): ReLU()
          )
          (2): Sequential(
            (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (8): ReLU()
          )
        )
        (points_sampler): Points_Sampler(
          (samplers): ModuleList(
            (0): FFPS_Sampler()
            (1): DFPS_Sampler()
          )
        )
      )
    )
    (aggregation_mlps): ModuleList(
      (0): Sequential(
        (0): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
        (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): Sequential(
        (0): Conv1d(384, 128, kernel_size=(1,), stride=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (2): Sequential(
        (0): Conv1d(768, 256, kernel_size=(1,), stride=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (FP_modules): ModuleList()
  )
  (map_to_bev_module): None
  (pfe): VoteModule(
    (vote_mlp): Sequential(
      (0): Conv1d(256, 128, kernel_size=(1,), stride=(1,))
      (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Conv1d(128, 3, kernel_size=(1,), stride=(1,))
    )
    (vote_aggregation): PointnetSAModuleMSG_FPS(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
      (points_sampler): Points_Sampler(
        (samplers): ModuleList(
          (0): DFPS_Sampler()
        )
      )
    )
    (conv_out): Sequential(
      (0): Conv1d(1536, 512, kernel_size=(1,), stride=(1,), bias=False)
      (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (backbone_2d): None
  (dense_head): None
  (point_head): PointHeadBox3DSSD(
    (cls_loss_func): SigmoidFocalClassificationLoss()
    (reg_loss_func): WeightedSmoothL1Loss()
    (cls_center_layers): Sequential(
      (0): Linear(in_features=512, out_features=256, bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=256, out_features=256, bias=False)
      (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU()
      (6): Linear(in_features=256, out_features=3, bias=True)
    )
    (box_center_layers): Sequential(
      (0): Linear(in_features=512, out_features=256, bias=False)
      (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): Linear(in_features=256, out_features=256, bias=False)
      (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU()
      (6): Linear(in_features=256, out_features=30, bias=True)
    )
    (angle_bin_loss): CrossEntropyLoss()
    (angle_res_loss): SmoothL1Loss()
    (vote_loss): SmoothL1Loss()
    (bbox_cls_loss): QualityFocalLoss()
  )
  (roi_head): None
)
2021-05-25 14:45:46,784   INFO  **********************Start training kitti_models/3dssd_diou(default)**********************
